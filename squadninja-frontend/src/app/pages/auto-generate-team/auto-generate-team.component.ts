import { Component, OnInit ,Input} from '@angular/core';
import { $ } from 'protractor';
import { FormControl } from '@angular/forms';
import {AutogenerateService} from '../../services/autogenServices/autogenerate.service';
import {HttpClient} from '@angular/common/http';
import { map } from 'rxjs/operators';
@Component({
  selector: 'app-auto-generate-team',
  templateUrl: './auto-generate-team.component.html',
  styleUrls: ['./auto-generate-team.component.scss']
})
export class AutoGenerateTeamComponent implements OnInit {
  public items: any;
  public postedIdeaDetails: any;
 
  title:any="";
  obj1:any="";
  obj:any="";
  disabled:boolean=true;
  cards = [];
  roleCards=[];
  tabs=[];
  selecctedTeam:any=[];
  response:any;
  x: any = [];
  accept:any=[];
  // sendAccept:any=[];
  sendAccept={
    name:"",
    mobileNo:"",
    email:"",
    role:{
      role:"",
      experience:"",
      skills:[],
    },
    chargePerHour:""
}
  toSendData = new Map();
  constructor(private autogenerate : AutogenerateService, private http:HttpClient,private autogeneratesp:AutogenerateService) { }
  ngOnInit() {
     let  disp=[];
// this.getPostedIdeas(); 
    this.title=localStorage.getItem("title");
    this.obj=localStorage.getItem("Role");
    this.obj1=JSON.parse(this.obj);
    for(let role of this.obj1){
        this.tabs.push(role.role);
        this.getAnyTeam(role.role);
        disp=this.cards;
        console.log(this.cards);
      }
     
}
sendAutogenTeam(){
  console.log(this.toSendData);
  for(let [key,value] of this.toSendData){
    this.accept.push(value);
  }
  console.log(this.accept.length);
  for(let i =0;i<this.accept.length;i++){
  this.sendAccept.name=this.accept[i].name;
  this.sendAccept.mobileNo=this.accept[i].mobileNo;
  console.log(this.accept[i].email);
  this.sendAccept.email=this.accept[i].email;
  console.log(this.sendAccept.email);
  this.sendAccept.role.skills=this.accept[i].skills;
  this.sendAccept.chargePerHour=this.accept[i].chargePerHour;
  console.log(this.sendAccept);
  this.selecctedTeam.push(this.sendAccept);
  console.log(this.selecctedTeam);
  }
  console.log(this.selecctedTeam);
  this.autogeneratesp.sendAutogeneratedTeam(this.selecctedTeam,this.title).subscribe((data)=>{
  this.response=data;
  });
}
addCards(toAdd){
  console.log(toAdd);
  this.cards.push(toAdd);
  console.log(this.cards);
}
getAnyTeam(role:any){
  // console.log(role);
  this.autogeneratesp.getByIdeaTitleAndRoleName(this.title,role)
  .subscribe(data =>{
    this.cards=data;
    this.roleCards.push(this.cards)
    // this.addCards(this.cards);
    console.log("after getting back from service",this.roleCards);
  }
  ); 
  // console.log(this.cards);
}
// for autogeneration team
// getTab(value: any) {
//   console.log(value, 'currentIndex');
//   this.autogenerate.participantsByRole(this.postedIdeaDetails.role[value].role).subscribe((response) => {
//   console.log(response);
//   if (response) {
//      response = response.map(e => {
//       e.acceptStatus = 'Accept';
//       e.rejectStatus = 'Reject';
//       return e
//     })
//     this.items = response;
//     console.log(this.items);
//     }
//     }, (err) => {
//     console.log(err);
//   });
// }
// getPostedIdeas() {
//   this.autogenerate.posetedIdeas().subscribe((response) => {
//     console.log(response);
//     if (response) {
//       this.postedIdeaDetails = response;
//       console.log(response);
//       this.getTab(0);
//       }
//     }, (err) => {
//       console.log(err);
//   });
//  }
// clickedAccept(item, role) {
//   this.items = this.items.map(e => {
//     if (item.Emailid == e.Emailid) {
//       e.rejectStatus = 'Reject';
//       e.acceptStatus = 'Accepted';
//     }
//     return e;
//  })
// }
// clickedReject(item , role) {
//   console.log(item, role);
//   this.items = this.items.map(e => {
//       if (item.Emailid == e.Emailid) {
//         e.rejectStatus = 'Rejected';
//         e.acceptStatus = 'Accept';
//       }
//       return e;
//   })
// }
clickedAccept(index,i){
 
  this.disabled=false;
  console.log(this.roleCards[index][i]);
  this.toSendData.set(2*index+1*i,this.roleCards[index][i]);
  console.log(this.toSendData);
  console.log(index);
  console.log(i);
  console.log("Accepted");
}
clickedReject(index,i){
  this.toSendData.delete(2*index+1*i);
  console.log(this.toSendData);
  console.log(index);
  console.log(i);
  console.log("Rejected");
}
}